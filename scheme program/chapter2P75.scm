(define (scale-tree tree factor)
	(cond ((null? tree) '())
		  ((not (pair? tree)) (* tree factor))
		  (else (cons (scale-tree (car tree) factor)
		  			  (scale-tree (cdr tree) factor)))))

(define (map proc items)
	(if (null? items)
		'()
		(cons (proc (car items))
			  (map proc (cdr items)))))

(define (scale-tree2 tree factor)
	(map (lambda (sub-tree)
		    (if (pair? sub-tree)
		    	(scale-tree2 sub-tree factor)
		    	(* sub-tree factor)))
	     tree))