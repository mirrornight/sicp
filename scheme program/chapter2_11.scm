(define (mul-interval x y)
	(define (endpoint-sign i)
		(cond ((and (>= (upper-bound i) 0)
					(>= (lower-bound i) 0))
		       1)
		      ((and (< (upper-bound i) 0)
		      		(< (lower-bound i) 0))
		       -1)
		      (else 0)))
	(let ((es-x (endpoint-sign x))
		  (es-y (endpoint-sign y))
		  (x-up (upper-bound x))
		  (x-lo (lower-bound x))
		  (y-up (upper-bound y))
		  (y-lo (lower-bound y)))
		(cond ((> es-x 0)
			   (cond ((> es-y 0)
			   		  (make-iterval (* x-lo y-lo) (* x-up y-up)))
			   		 ((< es-y 0)
			   		  (make-iterval (* x-up y-lo) (* x-lo y-up)))
			   		 (else
			   		  (make-iterval (* x-up y-lo) (* x-up y-up)))))
		      ((< es-x 0)
		       (cond ((> es-y 0)
		       	      (make-iterval (* x-lo y-up) (* x-up y-lo)))
		       		 ((< es-y 0)
		       		  (make-iterval (* x-up y-up) (* x-lo y-lo))))
		       		 (else
		       		  (make-iterval (* x-lo y-up) (* x-lo y-lo))))
		      (else
		      	(cond ((> es-y 0)
		      		   (make-iterval (* x-lo y-up) (* x-up y-up)))
		      		  ((< es-y 0)
		      		   (make-iterval (* x-up y-lo) (* x-lo y-lo)))
		      		  (else
		      		   (make-iterval (min (* x-lo y-up) (* x-up y-lo))
		      		   	             (max (* x-lo y-lo) (* x-up y-up)))))))))
　　　　